max_seq_len: 2048
global_seed: 17

# Run Name
# <data>-gpt-<#params>-<precision>-<arch>-<#bsz>-<#ctxlen>-<#tok>-<#nodes>-<cluster-name>-<etc>
run_name: code_evol_20k-starcoderbase-15b-bf16-plr2e-5-mlr0-gbsz512-ctxlen2048-ep3-wmup30

# Model
model:
  name: hf_causal_lm
  pretrained_model_name_or_path: /dataset/home/liaoxingyu/models/starcoderbase
  pretrained: true # false: only use the architecture; true: initialize with pretrained weights

# Tokenizer
tokenizer:
  name: /dataset/home/liaoxingyu/models/starcoderbase
  kwargs:
    model_max_length: ${max_seq_len}

# Dataloaders
train_loader:
  name: finetuning
  dataset:
    ############
    hf_name: json
    hf_kwargs:
      # Note: absolute paths for data_dir are more reliable;
      # relative paths will be interpreted relative to whatever your
      # working directory is when you run `train.py`
      data_files: data_prep/test_code_evol/code_evol_20k_r1.json
    # Note: `scripts/train` will be the working directory when resolving
    # the preprocessing_fn import path
    preprocessing_fn: finetune_example.preprocessing:wizardcoder_prompt
    split: train
    shuffle: true
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    # Use `python llmfoundry/data/packing.py --yaml-path /path/to/this/yaml/ ...`
    # to profile this run's optimal packing_ratio as it depends on GPU count,
    # batch size, sequence length
    # packing_ratio:
  num_workers: 8
  drop_last: true

# Optimization
scheduler:
  name: cosine_with_warmup
  t_warmup: 30ba
  alpha_f: 0.1

optimizer:
  name: decoupled_adamw
  lr: 2.0e-5
  betas:
  - 0.9
  - 0.95
  eps: 1.0e-08
  weight_decay: 0.0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0

max_duration: 3ep
eval_interval: 1
eval_first: false
eval_subset_num_batches: -1
global_train_batch_size: 512

# System
seed: ${global_seed}
device_eval_batch_size: 1
device_train_microbatch_size: 1
# device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: true
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: false

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

# loggers:
#   wandb:
#     project:

# Checkpoint to local filesystem or remote object store
save_interval: 500ba
save_num_checkpoints_to_keep: 5  # Important, this cleans up checkpoints saved to DISK
save_folder: ./output/${run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints

# Load from local filesystem or remote object store
# load_path: ./gpt-125m/checkpoints/latest-rank{rank}.pt
# load_path: s3://my-bucket/my-folder/gpt-125m/checkpoints/latest-rank{rank}.pt
